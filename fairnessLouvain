import collections
import random
import time
import networkx as nx
import matplotlib.pyplot as plt
from matplotlib import pyplot


def load_graph(path):
    G = collections.defaultdict(dict)
    with open(path) as text:
        for line in text:
            vertices = line.strip().split()
            v_i = int(vertices[0])
            v_j = int(vertices[1])
            w = 1.0  # 数据集有权重的话则读取数据集中的权重
            G[v_i][v_j] = w
            G[v_j][v_i] = w
    return G


# 节点类 存储社区与节点编号信息
class Vertex:
    def __init__(self, vid, cid, nodes, k_in=0):
        self._vid = vid
        self._cid = cid
        self._nodes = nodes
        self._kin = k_in


class Louvain:
    def __init__(self, G):
        self._G = G
        self._m = 0
        self._cid_vertices = {}
        self._vid_vertex = {}
        for vid in self._G.keys():
            self._cid_vertices[vid] = {vid}
            self._vid_vertex[vid] = Vertex(vid, vid, {vid})
            self._m += sum([1 for neighbor in self._G[vid].keys() if neighbor > vid])

    # 计算公平性模块度
    def fmodularity(self, community):
        QR = 0  # 红色模块度
        QB = 0  # 蓝色模块度
        Q = 0  # 总模块度

        for node in community:
            for neighbor in self._G[node]:
                if neighbor in community:
                    if self._vid_vertex[node]._cid == self._vid_vertex[neighbor]._cid:
                        QR += 1  # 红色连接
                    else:
                        QB += 1  # 蓝色连接

        Q = QR + QB
        return (QR - QB) / abs(Q) if Q != 0 else 0

    # 模块度优化阶段
    def first_stage(self):
        mod_inc = False
        visit_sequence = list(self._G.keys())
        random.shuffle(visit_sequence)
        while True:
            can_stop = True
            for v_vid in visit_sequence:
                v_cid = self._vid_vertex[v_vid]._cid
                k_v = sum(self._G[v_vid].values()) + self._vid_vertex[v_vid]._kin
                cid_Q = {}
                for w_vid in self._G[v_vid].keys():
                    w_cid = self._vid_vertex[w_vid]._cid
                    if w_cid in cid_Q:
                        continue
                    else:
                        # 计算公平性模块度增益
                        current_fmod = self.fmodularity(self._cid_vertices[v_cid])
                        new_fmod = self.fmodularity(self._cid_vertices[w_cid])
                        delta_Q = new_fmod - current_fmod
                        cid_Q[w_cid] = delta_Q

                cid, max_delta_Q = sorted(cid_Q.items(), key=lambda item: item[1], reverse=True)[0]
                if max_delta_Q > 0.0 and cid != v_cid:
                    self._vid_vertex[v_vid]._cid = cid
                    self._cid_vertices[cid].add(v_vid)
                    self._cid_vertices[v_cid].remove(v_vid)
                    can_stop = False
                    mod_inc = True
            if can_stop:
                break
        return mod_inc

    # 网络凝聚阶段
    def second_stage(self):
        cid_vertices = {}
        vid_vertex = {}
        for cid, vertices in self._cid_vertices.items():
            if len(vertices) == 0:
                continue
            new_vertex = Vertex(cid, cid, set())
            for vid in vertices:
                new_vertex._nodes.update(self._vid_vertex[vid]._nodes)
                new_vertex._kin += self._vid_vertex[vid]._kin
                for k, v in self._G[vid].items():
                    if k in vertices:
                        new_vertex._kin += v / 2.0
            cid_vertices[cid] = {cid}
            vid_vertex[cid] = new_vertex

        G = collections.defaultdict(dict)
        for cid1, vertices1 in self._cid_vertices.items():
            if len(vertices1) == 0:
                continue
            for cid2, vertices2 in self._cid_vertices.items():
                if cid2 <= cid1 or len(vertices2) == 0:
                    continue
                edge_weight = 0.0
                for vid in vertices1:
                    for k, v in self._G[vid].items():
                        if k in vertices2:
                            edge_weight += v
                if edge_weight != 0:
                    G[cid1][cid2] = edge_weight
                    G[cid2][cid1] = edge_weight
        self._cid_vertices = cid_vertices
        self._vid_vertex = vid_vertex
        self._G = G

    def get_communities(self):
        communities = []
        for vertices in self._cid_vertices.values():
            if len(vertices) != 0:
                c = set()
                for vid in vertices:
                    c.update(self._vid_vertex[vid]._nodes)
                communities.append(list(c))
        return communities

    def execute(self):
        iter_time = 1
        while True:
            iter_time += 1
            mod_inc = self.first_stage()
            if mod_inc:
                self.second_stage()
            else:
                break
        return self.get_communities()


# 可视化划分结果

def showCommunity(G, partition, pos):
    num_communities = len(partition)

    # 生成足够的颜色
    colors = pyplot.get_cmap('hsv', num_communities)  # 使用 HSV 色图生成足够的颜色

    cluster = {}
    labels = {}
    for index, item in enumerate(partition):
        for nodeID in item:
            labels[nodeID] = r'$' + str(nodeID) + '$'
            cluster[nodeID] = index

    shapes = ['v', 'D', 'o', '^', '<']
    for index, item in enumerate(partition):
        if index < num_communities:
            nx.draw_networkx_nodes(G, pos, nodelist=item,
                                   node_color=[colors(index)],  # 使用动态生成的颜色
                                   node_shape=shapes[index % len(shapes)],  # 循环使用形状
                                   node_size=350,
                                   alpha=1)
        else:
            print(f"Warning: Index {index} is out of range for colors array.")

    # 绘制边
    for edge in G.edges():
        community_index_1 = cluster[edge[0]]
        community_index_2 = cluster[edge[1]]

        if community_index_1 == community_index_2:
            edge_color = colors(community_index_1)  # 同一社区的边
        else:
            edge_color = 'gray'  # 不同社区的边使用灰色

        nx.draw_networkx_edges(G, pos,
                               edgelist=[edge],
                               width=1, alpha=0.8, edge_color=edge_color)

    nx.draw_networkx_labels(G, pos, labels, font_size=12)

    plt.axis('off')
    plt.show()

def cal_Q(partition, G):
    m = len(G.edges(None, False))
    a = []
    e = []
    for community in partition:
        t = 0.0
        for node in community:
            t += len([x for x in G.neighbors(node)])
        a.append(t / (2 * m))
    for community in partition:
        t = 0.0
        for i in range(len(community)):
            for j in range(len(community)):
                if (G.has_edge(community[i], community[j])):
                    t += 1.0
        e.append(t / (2 * m))

    q = 0.0
    for ei, ai in zip(e, a):
        q += (ei - ai ** 2)
    return q


class Graph:
    graph = nx.DiGraph()

    def __init__(self):
        self.graph = nx.DiGraph()

    def createGraph(self, filename):
        file = open(filename, 'r')

        for line in file.readlines():
            nodes = line.split()
            edge = (int(nodes[0]), int(nodes[1]))
            self.graph.add_edge(*edge)

        return self.graph


if __name__ == '__main__':
    # 加载图数据
    G = load_graph(r'C:\Users\21542\PycharmProjects\pythonProject3\Networks\Louvainexample.txt')

    # 创建一个 NetworkX 图对象（如果需要的话）
    obj = Graph()
    G1 = obj.createGraph(r'C:\Users\21542\PycharmProjects\pythonProject3\Networks\Louvainexample.txt')

    # 使用 Karate Club 图作为示例（可选）
    # G1 = nx.karate_club_graph()

    # 计算节点位置用于可视化
    pos = nx.spring_layout(G1)

    # 记录开始时间
    start_time = time.time()

    # 执行 Louvain 算法
    algorithm = Louvain(G)
    communities = algorithm.execute()

    # 记录结束时间
    end_time = time.time()

    # 按照社区大小从大到小排序输出
    communities = sorted(communities, key=lambda b: -len(b))  # 按社区大小排序
    count = 0
    for community in communities:
        count += 1
        # 计算并输出每个社区的公平性模块度
        fmod_value = algorithm.fmodularity(community)
        print(f"社区 {count}: {community}, 公平性模块度: {fmod_value:.4f}")

    # 计算并输出总模块度
    total_modularity = cal_Q(communities, G1)
    print(f"总模块度: {total_modularity:.4f}")

    # 输出算法执行时间
    print(f'算法执行时间: {end_time - start_time:.4f}秒')

    # 可视化结果
    showCommunity(G1, communities, pos)
